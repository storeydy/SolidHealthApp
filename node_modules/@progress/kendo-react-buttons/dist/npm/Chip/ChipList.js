"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var PropTypes = require("prop-types");
var kendo_react_common_1 = require("@progress/kendo-react-common");
var selection_reducer_1 = require("./selection-reducer");
var focus_reducer_1 = require("./focus-reducer");
var data_reducer_1 = require("./data-reducer");
var Chip_1 = require("./Chip");
var kendo_react_common_2 = require("@progress/kendo-react-common");
var package_metadata_1 = require("../package-metadata");
/**
 * @hidden
 */
exports.ChipListSelectionContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
exports.ChipListFocusContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
exports.ChipListDataContext = React.createContext([null, function (_args) {
        /**/
    }]);
/**
 * @hidden
 */
var useSelection = function (defaultValue, args, callback) {
    var _a = React.useState(defaultValue), state = _a[0], setState = _a[1];
    var handleDispatchSelection = function (action) {
        var newState = selection_reducer_1.selectionReducer(args.state || state, __assign({}, action, args));
        if (callback) {
            callback(newState, action.event);
        }
        setState(newState);
    };
    return [state, handleDispatchSelection];
};
/**
 * @hidden
 */
var useFocus = function (args) {
    var _a = React.useState(null), state = _a[0], setState = _a[1];
    var handleDispatchFocus = function (action) {
        var newState = focus_reducer_1.focusReducer(action.payload, __assign({}, action, args));
        setState(newState);
    };
    return [state, handleDispatchFocus];
};
/**
 * @hidden
 */
var useData = function (defaultData, args, callback) {
    var _a = React.useState(defaultData), state = _a[0], setState = _a[1];
    var handleDispatchData = function (action) {
        var newState = data_reducer_1.dataReducer(args.state || state, __assign({}, action, args));
        if (callback) {
            callback(newState, action.event);
        }
        setState(newState);
    };
    return [state, handleDispatchData];
};
/**
 * Represents the ChipList component.
 */
exports.ChipList = React.forwardRef(function (props, ref) {
    var _a;
    kendo_react_common_2.validatePackage(package_metadata_1.packageMetadata);
    var target = React.useRef(null);
    var chipListRef = React.useRef(null);
    var dir = kendo_react_common_1.useDir(chipListRef, props.dir);
    var ChipComponent = React.useMemo(function () { return props.chip || Chip_1.Chip; }, [props.chip, Chip_1.Chip]);
    var selection = React.useMemo(function () { return props.selection || defaultProps.selection; }, [props.selection, defaultProps.selection]);
    React.useImperativeHandle(target, function () { return ({
        element: chipListRef.current,
        props: props
    }); });
    React.useImperativeHandle(ref, function () { return target.current; });
    var handleChange = React.useCallback(function (newValue, event) {
        if (props.onChange && target.current) {
            props.onChange.call(undefined, {
                value: newValue,
                target: target.current,
                syntheticEvent: event
            });
        }
    }, [props.onChange]);
    var _b = useSelection(props.value || props.defaultValue, {
        selection: selection,
        state: props.value
    }, handleChange), stateValue = _b[0], dispatchStateValue = _b[1];
    var handleDataChange = React.useCallback(function (newData, event) {
        if (props.onDataChange && target.current) {
            props.onDataChange.call(undefined, {
                value: newData,
                target: target.current,
                syntheticEvent: event
            });
        }
    }, [props.onDataChange]);
    var _c = useData(props.data || props.defaultData || defaultProps.defaultData, {
        state: props.data,
        valueField: props.valueField || defaultProps.valueField
    }, handleDataChange), stateData = _c[0], dispatchData = _c[1];
    var itemsReducer = React.useCallback(function (acc, current) {
        acc.push(current[props.valueField || defaultProps.valueField]);
        return acc;
    }, [props.valueField, defaultProps.valueField]);
    var data = React.useMemo(function () { return props.data || stateData; }, [props.data, stateData]);
    var value = React.useMemo(function () { return props.value || stateValue; }, [props.value, stateValue]);
    var items = React.useMemo(function () { return data.reduce(itemsReducer, []); }, [data, itemsReducer]);
    var _d = useFocus({ items: items }), focus = _d[0], dispatchFocus = _d[1];
    var mouseProps = kendo_react_common_1.useMouse(props, target);
    return (React.createElement(exports.ChipListSelectionContext.Provider, { value: [value, dispatchStateValue] },
        React.createElement(exports.ChipListFocusContext.Provider, { value: [focus, dispatchFocus] },
            React.createElement(exports.ChipListDataContext.Provider, { value: [data, dispatchData] },
                React.createElement("div", __assign({ ref: chipListRef }, mouseProps, { role: 'listbox', id: props.id, dir: dir, style: props.style, tabIndex: kendo_react_common_1.getTabIndex(props.tabIndex, props.disabled, undefined), className: kendo_react_common_1.classNames('k-chip-list', (_a = {
                            'k-rtl': dir === 'rtl',
                            'k-disabled': props.disabled
                        },
                        _a["k-chip-list-" + (kendo_react_common_1.kendoThemeMaps.sizeMap[props.size] || props.size)] = props.size,
                        _a), props.className), "aria-labelledby": props.ariaLabelledBy, "aria-describedby": props.ariaDescribedBy }), data.map(function (item) {
                    return (React.createElement(ChipComponent, { role: 'option', dataItem: item, size: props.size, key: kendo_react_common_1.getter(props.valueField || defaultProps.valueField)(item), text: kendo_react_common_1.getter(props.textField || defaultProps.textField)(item), value: kendo_react_common_1.getter(props.valueField || defaultProps.valueField)(item) }));
                }))))));
});
var propTypes = {
    id: PropTypes.string,
    className: PropTypes.string,
    tabIndex: PropTypes.number,
    data: PropTypes.any,
    defaultData: PropTypes.arrayOf(PropTypes.any),
    onDataChange: PropTypes.func,
    value: PropTypes.oneOfType([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),
    defaultValue: PropTypes.oneOfType([PropTypes.any, PropTypes.arrayOf(PropTypes.any)]),
    onChange: PropTypes.func,
    selection: PropTypes.oneOf(['single', 'none', 'multiple']),
    textField: PropTypes.string,
    valueField: PropTypes.string,
    disabled: PropTypes.bool,
    dir: PropTypes.oneOf(['ltr', 'rtl']),
    ariaLabelledBy: PropTypes.string,
    ariaDescribedBy: PropTypes.string
};
var defaultProps = {
    chip: Chip_1.Chip,
    size: 'medium',
    disabled: false,
    defaultValue: null,
    defaultData: [],
    dir: 'ltr',
    selection: 'none',
    textField: 'text',
    valueField: 'value',
    removable: 'removable'
};
exports.ChipList.displayName = 'KendoReactChipList';
// TODO: delete casting when @types/react is updated!
exports.ChipList.propTypes = propTypes;
exports.ChipList.defaultProps = defaultProps;
