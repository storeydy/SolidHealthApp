"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const solid_client_authn_core_1 = require("@inrupt/solid-client-authn-core");
const oidc_client_ext_1 = require("@inrupt/oidc-client-ext");
const jose_legacy_modules_1 = require("@inrupt/jose-legacy-modules");
const constant_1 = require("./constant");
const globalFetch = (request, init) => window.fetch(request, init);
class ClientAuthentication {
    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher) {
        this.loginHandler = loginHandler;
        this.redirectHandler = redirectHandler;
        this.logoutHandler = logoutHandler;
        this.sessionInfoManager = sessionInfoManager;
        this.issuerConfigFetcher = issuerConfigFetcher;
        this.login = async (options, eventEmitter) => {
            var _a, _b;
            await this.sessionInfoManager.clear(options.sessionId);
            const redirectUrl = oidc_client_ext_1.removeOidcQueryParam((_a = options.redirectUrl) !== null && _a !== void 0 ? _a : window.location.href);
            await this.loginHandler.handle({
                ...options,
                redirectUrl,
                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,
                eventEmitter,
            });
        };
        this.fetch = globalFetch;
        this.logout = async (sessionId) => {
            await this.logoutHandler.handle(sessionId);
            this.fetch = globalFetch;
        };
        this.getSessionInfo = async (sessionId) => {
            return this.sessionInfoManager.get(sessionId);
        };
        this.getAllSessionInfo = async () => {
            return this.sessionInfoManager.getAll();
        };
        this.validateCurrentSession = async () => {
            const currentSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);
            if (currentSessionId === null) {
                return null;
            }
            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);
            if (sessionInfo === undefined ||
                sessionInfo.idToken === undefined ||
                sessionInfo.clientAppId === undefined ||
                sessionInfo.issuer === undefined) {
                return null;
            }
            const issuerConfig = await this.issuerConfigFetcher.fetchConfig(sessionInfo.issuer);
            try {
                const jwk = await solid_client_authn_core_1.fetchJwks(issuerConfig.jwksUri, issuerConfig.issuer);
                await jose_legacy_modules_1.jwtVerify(sessionInfo.idToken, await jose_legacy_modules_1.parseJwk(jwk), {
                    audience: sessionInfo.clientAppId,
                    issuer: issuerConfig.issuer,
                });
                return sessionInfo;
            }
            catch (e) {
            }
            return null;
        };
        this.handleIncomingRedirect = async (url, eventEmitter) => {
            const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);
            this.fetch = redirectInfo.fetch.bind(window);
            const cleanedUpUrl = new URL(url);
            cleanedUpUrl.searchParams.delete("state");
            cleanedUpUrl.searchParams.delete("code");
            cleanedUpUrl.searchParams.delete("id_token");
            cleanedUpUrl.searchParams.delete("access_token");
            cleanedUpUrl.searchParams.delete("error");
            cleanedUpUrl.searchParams.delete("error_description");
            window.history.replaceState(null, "", cleanedUpUrl.toString());
            return {
                isLoggedIn: redirectInfo.isLoggedIn,
                webId: redirectInfo.webId,
                sessionId: redirectInfo.sessionId,
                expirationDate: redirectInfo.expirationDate,
            };
        };
    }
}
exports.default = ClientAuthentication;
//# sourceMappingURL=ClientAuthentication.js.map