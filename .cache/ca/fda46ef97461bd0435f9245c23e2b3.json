{"id":"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/IClientRegistrar.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\login\\oidc\\IClientRegistrar.js.map","includedInParent":true,"mtime":1645788391001},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\src\\login\\oidc\\IClientRegistrar.ts","includedInParent":true,"mtime":1645788391044},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645788402217},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\package.json","includedInParent":true,"mtime":1645788391034}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.handleRegistration = exports.determineSigningAlg = void 0;\r\nfunction isValidUrl(url) {\r\n    try {\r\n        new URL(url);\r\n        return true;\r\n    }\r\n    catch (_a) {\r\n        return false;\r\n    }\r\n}\r\nfunction determineSigningAlg(supported, preferred) {\r\n    var _a;\r\n    return ((_a = preferred.find((signingAlg) => {\r\n        return supported.includes(signingAlg);\r\n    })) !== null && _a !== void 0 ? _a : null);\r\n}\r\nexports.determineSigningAlg = determineSigningAlg;\r\nfunction determineClientType(options, issuerConfig) {\r\n    if (options.clientId !== undefined && !isValidUrl(options.clientId)) {\r\n        return \"static\";\r\n    }\r\n    if (issuerConfig.solidOidcSupported ===\r\n        \"https://solidproject.org/TR/solid-oidc\" &&\r\n        options.clientId !== undefined &&\r\n        isValidUrl(options.clientId)) {\r\n        return \"solid-oidc\";\r\n    }\r\n    return \"dynamic\";\r\n}\r\nasync function handleRegistration(options, issuerConfig, storageUtility, clientRegistrar) {\r\n    const clientType = determineClientType(options, issuerConfig);\r\n    if (clientType === \"dynamic\") {\r\n        return clientRegistrar.getClient({\r\n            sessionId: options.sessionId,\r\n            clientName: options.clientName,\r\n            redirectUrl: options.redirectUrl,\r\n        }, issuerConfig);\r\n    }\r\n    await storageUtility.setForUser(options.sessionId, {\r\n        clientId: options.clientId,\r\n    });\r\n    if (options.clientSecret) {\r\n        await storageUtility.setForUser(options.sessionId, {\r\n            clientSecret: options.clientSecret,\r\n        });\r\n    }\r\n    if (options.clientName) {\r\n        await storageUtility.setForUser(options.sessionId, {\r\n            clientName: options.clientName,\r\n        });\r\n    }\r\n    return {\r\n        clientId: options.clientId,\r\n        clientSecret: options.clientSecret,\r\n        clientName: options.clientName,\r\n        clientType,\r\n    };\r\n}\r\nexports.handleRegistration = handleRegistration;\r\n"},"sourceMaps":{"js":{"version":3,"file":"IClientRegistrar.js","sourceRoot":"","sources":["../../../src/login/oidc/IClientRegistrar.ts"],"names":[],"mappings":";;;AAgDA,SAAS,UAAU,CAAC,GAAW;IAC7B,IAAI;QAIF,IAAI,GAAG,CAAC,GAAG,CAAC,CAAC;QACb,OAAO,IAAI,CAAC;KACb;IAAC,WAAM;QACN,OAAO,KAAK,CAAC;KACd;AACH,CAAC;AAED,SAAgB,mBAAmB,CACjC,SAAmB,EACnB,SAAmB;;IAEnB,OAAO,CACL,MAAA,SAAS,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;QAC5B,OAAO,SAAS,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;IACxC,CAAC,CAAC,mCAAI,IAAI,CACX,CAAC;AACJ,CAAC;AATD,kDASC;AAED,SAAS,mBAAmB,CAC1B,OAAsB,EACtB,YAA2B;IAE3B,IAAI,OAAO,CAAC,QAAQ,KAAK,SAAS,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QACnE,OAAO,QAAQ,CAAC;KACjB;IACD,IACE,YAAY,CAAC,kBAAkB;QAC7B,wCAAwC;QAC1C,OAAO,CAAC,QAAQ,KAAK,SAAS;QAC9B,UAAU,CAAC,OAAO,CAAC,QAAQ,CAAC,EAC5B;QACA,OAAO,YAAY,CAAC;KACrB;IAKD,OAAO,SAAS,CAAC;AACnB,CAAC;AAEM,KAAK,UAAU,kBAAkB,CACtC,OAAsB,EACtB,YAA2B,EAC3B,cAA+B,EAC/B,eAAiC;IAEjC,MAAM,UAAU,GAAG,mBAAmB,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAC9D,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5B,OAAO,eAAe,CAAC,SAAS,CAC9B;YACE,SAAS,EAAE,OAAO,CAAC,SAAS;YAC5B,UAAU,EAAE,OAAO,CAAC,UAAU;YAC9B,WAAW,EAAE,OAAO,CAAC,WAAW;SACjC,EACD,YAAY,CACb,CAAC;KACH;IAKD,MAAM,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE;QAGjD,QAAQ,EAAE,OAAO,CAAC,QAAS;KAC5B,CAAC,CAAC;IACH,IAAI,OAAO,CAAC,YAAY,EAAE;QACxB,MAAM,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE;YACjD,YAAY,EAAE,OAAO,CAAC,YAAY;SACnC,CAAC,CAAC;KACJ;IACD,IAAI,OAAO,CAAC,UAAU,EAAE;QACtB,MAAM,cAAc,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,EAAE;YACjD,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B,CAAC,CAAC;KACJ;IACD,OAAO;QAEL,QAAQ,EAAE,OAAO,CAAC,QAAS;QAC3B,YAAY,EAAE,OAAO,CAAC,YAAY;QAClC,UAAU,EAAE,OAAO,CAAC,UAAU;QAC9B,UAAU;KACX,CAAC;AACJ,CAAC;AA3CD,gDA2CC","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\nimport IStorageUtility from \"../../storage/IStorageUtility\";\r\nimport ILoginOptions from \"../ILoginOptions\";\r\nimport { ClientType, IClient } from \"./IClient\";\r\nimport { IIssuerConfig } from \"./IIssuerConfig\";\r\n\r\nexport interface IClientRegistrarOptions {\r\n  sessionId: string;\r\n  clientName?: string;\r\n  redirectUrl?: string;\r\n  registrationAccessToken?: string;\r\n}\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport interface IClientRegistrar {\r\n  getClient(\r\n    options: IClientRegistrarOptions,\r\n    issuerConfig: IIssuerConfig\r\n  ): Promise<IClient>;\r\n}\r\n\r\nfunction isValidUrl(url: string): boolean {\r\n  try {\r\n    // Here, the URL constructor is just called to parse the given string and\r\n    // verify if it is a well-formed IRI.\r\n    // eslint-disable-next-line no-new\r\n    new URL(url);\r\n    return true;\r\n  } catch {\r\n    return false;\r\n  }\r\n}\r\n\r\nexport function determineSigningAlg(\r\n  supported: string[],\r\n  preferred: string[]\r\n): string | null {\r\n  return (\r\n    preferred.find((signingAlg) => {\r\n      return supported.includes(signingAlg);\r\n    }) ?? null\r\n  );\r\n}\r\n\r\nfunction determineClientType(\r\n  options: ILoginOptions,\r\n  issuerConfig: IIssuerConfig\r\n): ClientType {\r\n  if (options.clientId !== undefined && !isValidUrl(options.clientId)) {\r\n    return \"static\";\r\n  }\r\n  if (\r\n    issuerConfig.solidOidcSupported ===\r\n      \"https://solidproject.org/TR/solid-oidc\" &&\r\n    options.clientId !== undefined &&\r\n    isValidUrl(options.clientId)\r\n  ) {\r\n    return \"solid-oidc\";\r\n  }\r\n  // If no client_id is provided, the client must go through Dynamic Client Registration.\r\n  // If a client_id is provided and it looks like a URI, yet the Identity Provider\r\n  // does *not* support Solid-OIDC, then we also perform DCR (and discard the\r\n  // provided client_id).\r\n  return \"dynamic\";\r\n}\r\n\r\nexport async function handleRegistration(\r\n  options: ILoginOptions,\r\n  issuerConfig: IIssuerConfig,\r\n  storageUtility: IStorageUtility,\r\n  clientRegistrar: IClientRegistrar\r\n): Promise<IClient> {\r\n  const clientType = determineClientType(options, issuerConfig);\r\n  if (clientType === \"dynamic\") {\r\n    return clientRegistrar.getClient(\r\n      {\r\n        sessionId: options.sessionId,\r\n        clientName: options.clientName,\r\n        redirectUrl: options.redirectUrl,\r\n      },\r\n      issuerConfig\r\n    );\r\n  }\r\n  // If a client_id was provided, and the Identity Provider is Solid-OIDC compliant,\r\n  // or it is not compliant but the client_id isn't an IRI (we assume it has already\r\n  // been registered with the IdP), then the client registration information needs\r\n  // to be stored so that it can be retrieved later after redirect.\r\n  await storageUtility.setForUser(options.sessionId, {\r\n    // If the client is either static or solid-oidc compliant, its client ID cannot be undefined.\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    clientId: options.clientId!,\r\n  });\r\n  if (options.clientSecret) {\r\n    await storageUtility.setForUser(options.sessionId, {\r\n      clientSecret: options.clientSecret,\r\n    });\r\n  }\r\n  if (options.clientName) {\r\n    await storageUtility.setForUser(options.sessionId, {\r\n      clientName: options.clientName,\r\n    });\r\n  }\r\n  return {\r\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\r\n    clientId: options.clientId!,\r\n    clientSecret: options.clientSecret,\r\n    clientName: options.clientName,\r\n    clientType,\r\n  };\r\n}\r\n"]}},"error":null,"hash":"06fb8d86813d23c00621b57f1fff0633","cacheData":{"env":{}}}