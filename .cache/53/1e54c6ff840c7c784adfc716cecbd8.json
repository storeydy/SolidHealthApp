{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/refresh/TokenRefresher.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\refresh\\TokenRefresher.js.map","includedInParent":true,"mtime":1645788390860},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\refresh\\TokenRefresher.ts","includedInParent":true,"mtime":1645788390965},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645793376876},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\package.json","includedInParent":true,"mtime":1645788390926},{"name":"@inrupt/solid-client-authn-core","loc":{"line":3,"column":42},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\refresh\\TokenRefresher.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\index.js"},{"name":"@inrupt/oidc-client-ext","loc":{"line":4,"column":34},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\refresh\\TokenRefresher.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\oidc-client-ext\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\r\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\r\nclass TokenRefresher {\r\n    constructor(storageUtility, issuerConfigFetcher, clientRegistrar) {\r\n        this.storageUtility = storageUtility;\r\n        this.issuerConfigFetcher = issuerConfigFetcher;\r\n        this.clientRegistrar = clientRegistrar;\r\n    }\r\n    async refresh(sessionId, refreshToken, dpopKey, eventEmitter) {\r\n        const oidcContext = await solid_client_authn_core_1.loadOidcContextFromStorage(sessionId, this.storageUtility, this.issuerConfigFetcher);\r\n        const clientInfo = await this.clientRegistrar.getClient({ sessionId }, oidcContext.issuerConfig);\r\n        if (refreshToken === undefined) {\r\n            throw new Error(`Session [${sessionId}] has no refresh token to allow it to refresh its access token.`);\r\n        }\r\n        if (oidcContext.dpop && dpopKey === undefined) {\r\n            throw new Error(`For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`);\r\n        }\r\n        const tokenSet = await oidc_client_ext_1.refresh(refreshToken, oidcContext.issuerConfig, clientInfo, dpopKey);\r\n        if (tokenSet.refreshToken !== undefined) {\r\n            eventEmitter === null || eventEmitter === void 0 ? void 0 : eventEmitter.emit(solid_client_authn_core_1.EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);\r\n            await this.storageUtility.setForUser(sessionId, {\r\n                refreshToken: tokenSet.refreshToken,\r\n            });\r\n        }\r\n        return tokenSet;\r\n    }\r\n}\r\nexports.default = TokenRefresher;\r\n"},"sourceMaps":{"js":{"version":3,"file":"TokenRefresher.js","sourceRoot":"","sources":["../../../../src/login/oidc/refresh/TokenRefresher.ts"],"names":[],"mappings":";;AA0BA,6EAUyC;AACzC,6DAAkD;AAUlD,MAAqB,cAAc;IACjC,YACU,cAA+B,EAC/B,mBAAyC,EACzC,eAAiC;QAFjC,mBAAc,GAAd,cAAc,CAAiB;QAC/B,wBAAmB,GAAnB,mBAAmB,CAAsB;QACzC,oBAAe,GAAf,eAAe,CAAkB;IACxC,CAAC;IAEJ,KAAK,CAAC,OAAO,CACX,SAAiB,EACjB,YAAqB,EACrB,OAAiB,EACjB,YAA2B;QAE3B,MAAM,WAAW,GAAG,MAAM,oDAA0B,CAClD,SAAS,EACT,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,mBAAmB,CACzB,CAAC;QAEF,MAAM,UAAU,GAAY,MAAM,IAAI,CAAC,eAAe,CAAC,SAAS,CAC9D,EAAE,SAAS,EAAE,EACb,WAAW,CAAC,YAAY,CACzB,CAAC;QAEF,IAAI,YAAY,KAAK,SAAS,EAAE;YAE9B,MAAM,IAAI,KAAK,CACb,YAAY,SAAS,iEAAiE,CACvF,CAAC;SACH;QAED,IAAI,WAAW,CAAC,IAAI,IAAI,OAAO,KAAK,SAAS,EAAE;YAC7C,MAAM,IAAI,KAAK,CACb,gBAAgB,SAAS,0FAA0F,CACpH,CAAC;SACH;QAED,MAAM,QAAQ,GAAG,MAAM,yBAAO,CAC5B,YAAY,EACZ,WAAW,CAAC,YAAY,EACxB,UAAU,EACV,OAAO,CACR,CAAC;QAEF,IAAI,QAAQ,CAAC,YAAY,KAAK,SAAS,EAAE;YACvC,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,IAAI,CAAC,gCAAM,CAAC,iBAAiB,EAAE,QAAQ,CAAC,YAAY,CAAC,CAAC;YACpE,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,SAAS,EAAE;gBAC9C,YAAY,EAAE,QAAQ,CAAC,YAAY;aACpC,CAAC,CAAC;SACJ;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AApDD,iCAoDC","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\nimport {\r\n  IClient,\r\n  IClientRegistrar,\r\n  IIssuerConfigFetcher,\r\n  IStorageUtility,\r\n  loadOidcContextFromStorage,\r\n  KeyPair,\r\n  ITokenRefresher,\r\n  TokenEndpointResponse,\r\n  EVENTS,\r\n} from \"@inrupt/solid-client-authn-core\";\r\nimport { refresh } from \"@inrupt/oidc-client-ext\";\r\nimport { EventEmitter } from \"events\";\r\n\r\n// Some identifiers are not in camelcase on purpose, as they are named using the\r\n// official names from the OIDC/OAuth2 specifications.\r\n/* eslint-disable camelcase */\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport default class TokenRefresher implements ITokenRefresher {\r\n  constructor(\r\n    private storageUtility: IStorageUtility,\r\n    private issuerConfigFetcher: IIssuerConfigFetcher,\r\n    private clientRegistrar: IClientRegistrar\r\n  ) {}\r\n\r\n  async refresh(\r\n    sessionId: string,\r\n    refreshToken?: string,\r\n    dpopKey?: KeyPair,\r\n    eventEmitter?: EventEmitter\r\n  ): Promise<TokenEndpointResponse> {\r\n    const oidcContext = await loadOidcContextFromStorage(\r\n      sessionId,\r\n      this.storageUtility,\r\n      this.issuerConfigFetcher\r\n    );\r\n    // This should also retrieve the client from storage\r\n    const clientInfo: IClient = await this.clientRegistrar.getClient(\r\n      { sessionId },\r\n      oidcContext.issuerConfig\r\n    );\r\n\r\n    if (refreshToken === undefined) {\r\n      // TODO: in a next PR, look up storage for a refresh token\r\n      throw new Error(\r\n        `Session [${sessionId}] has no refresh token to allow it to refresh its access token.`\r\n      );\r\n    }\r\n\r\n    if (oidcContext.dpop && dpopKey === undefined) {\r\n      throw new Error(\r\n        `For session [${sessionId}], the key bound to the DPoP access token must be provided to refresh said access token.`\r\n      );\r\n    }\r\n\r\n    const tokenSet = await refresh(\r\n      refreshToken,\r\n      oidcContext.issuerConfig,\r\n      clientInfo,\r\n      dpopKey\r\n    );\r\n\r\n    if (tokenSet.refreshToken !== undefined) {\r\n      eventEmitter?.emit(EVENTS.NEW_REFRESH_TOKEN, tokenSet.refreshToken);\r\n      await this.storageUtility.setForUser(sessionId, {\r\n        refreshToken: tokenSet.refreshToken,\r\n      });\r\n    }\r\n    return tokenSet;\r\n  }\r\n}\r\n"]}},"error":null,"hash":"3bc24c71719abcb92ff2d85dcd0af644","cacheData":{"env":{}}}