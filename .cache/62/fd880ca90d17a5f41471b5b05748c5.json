{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\oidcHandlers\\AuthorizationCodeWithPkceOidcHandler.js.map","includedInParent":true,"mtime":1645788390853},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\oidcHandlers\\AuthorizationCodeWithPkceOidcHandler.ts","includedInParent":true,"mtime":1645788390960},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645793376876},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\package.json","includedInParent":true,"mtime":1645788390926},{"name":"@inrupt/oidc-client-ext","loc":{"line":3,"column":34},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\oidcHandlers\\AuthorizationCodeWithPkceOidcHandler.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\oidc-client-ext\\dist\\index.es.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\r\nclass AuthorizationCodeWithPkceOidcHandler {\r\n    constructor(storageUtility, redirector) {\r\n        this.storageUtility = storageUtility;\r\n        this.redirector = redirector;\r\n    }\r\n    async canHandle(oidcLoginOptions) {\r\n        return !!(oidcLoginOptions.issuerConfiguration.grantTypesSupported &&\r\n            oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\"authorization_code\") > -1);\r\n    }\r\n    async handle(oidcLoginOptions) {\r\n        var _a;\r\n        const oidcOptions = {\r\n            authority: oidcLoginOptions.issuer.toString(),\r\n            client_id: oidcLoginOptions.client.clientId,\r\n            client_secret: oidcLoginOptions.client.clientSecret,\r\n            redirect_uri: oidcLoginOptions.redirectUrl.toString(),\r\n            post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\r\n            response_type: \"code\",\r\n            scope: \"openid offline_access\",\r\n            filterProtocolClaims: true,\r\n            loadUserInfo: false,\r\n            code_verifier: true,\r\n            prompt: (_a = oidcLoginOptions.prompt) !== null && _a !== void 0 ? _a : \"consent\",\r\n        };\r\n        const oidcClientLibrary = new oidc_client_ext_1.OidcClient(oidcOptions);\r\n        const { redirector } = this;\r\n        const storage = this.storageUtility;\r\n        try {\r\n            const signingRequest = await oidcClientLibrary.createSigninRequest();\r\n            await Promise.all([\r\n                storage.setForUser(signingRequest.state._id, {\r\n                    sessionId: oidcLoginOptions.sessionId,\r\n                }),\r\n                storage.setForUser(oidcLoginOptions.sessionId, {\r\n                    codeVerifier: signingRequest.state._code_verifier,\r\n                    issuer: oidcLoginOptions.issuer.toString(),\r\n                    redirectUrl: oidcLoginOptions.redirectUrl,\r\n                    dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\r\n                }),\r\n            ]);\r\n            redirector.redirect(signingRequest.url.toString(), {\r\n                handleRedirect: oidcLoginOptions.handleRedirect,\r\n                redirectInIframe: oidcLoginOptions.inIframe,\r\n            });\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexports.default = AuthorizationCodeWithPkceOidcHandler;\r\n"},"sourceMaps":{"js":{"version":3,"file":"AuthorizationCodeWithPkceOidcHandler.js","sourceRoot":"","sources":["../../../../src/login/oidc/oidcHandlers/AuthorizationCodeWithPkceOidcHandler.ts"],"names":[],"mappings":";;AAoCA,6DAAqD;AAOrD,MAAqB,oCAAoC;IAGvD,YACU,cAA+B,EAC/B,UAAuB;QADvB,mBAAc,GAAd,cAAc,CAAiB;QAC/B,eAAU,GAAV,UAAU,CAAa;IAC9B,CAAC;IAEJ,KAAK,CAAC,SAAS,CAAC,gBAA8B;QAC5C,OAAO,CAAC,CAAC,CACP,gBAAgB,CAAC,mBAAmB,CAAC,mBAAmB;YACxD,gBAAgB,CAAC,mBAAmB,CAAC,mBAAmB,CAAC,OAAO,CAC9D,oBAAoB,CACrB,GAAG,CAAC,CAAC,CACP,CAAC;IACJ,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,gBAA8B;;QAEzC,MAAM,WAAW,GAAG;YAClB,SAAS,EAAE,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC7C,SAAS,EAAE,gBAAgB,CAAC,MAAM,CAAC,QAAQ;YAC3C,aAAa,EAAE,gBAAgB,CAAC,MAAM,CAAC,YAAY;YACnD,YAAY,EAAE,gBAAgB,CAAC,WAAW,CAAC,QAAQ,EAAE;YACrD,wBAAwB,EAAE,gBAAgB,CAAC,WAAW,CAAC,QAAQ,EAAE;YACjE,aAAa,EAAE,MAAM;YAErB,KAAK,EAAE,uBAAuB;YAC9B,oBAAoB,EAAE,IAAI;YAI1B,YAAY,EAAE,KAAK;YACnB,aAAa,EAAE,IAAI;YACnB,MAAM,EAAE,MAAA,gBAAgB,CAAC,MAAM,mCAAI,SAAS;SAC7C,CAAC;QAGF,MAAM,iBAAiB,GAAG,IAAI,4BAAU,CAAC,WAAW,CAAC,CAAC;QAEtD,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;QAC5B,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,CAAC;QAEpC,IAAI;YACF,MAAM,cAAc,GAAG,MAAM,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;YACrE,MAAM,OAAO,CAAC,GAAG,CAAC;gBAWhB,OAAO,CAAC,UAAU,CAAC,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE;oBAC3C,SAAS,EAAE,gBAAgB,CAAC,SAAS;iBACtC,CAAC;gBAMF,OAAO,CAAC,UAAU,CAAC,gBAAgB,CAAC,SAAS,EAAE;oBAE7C,YAAY,EAAE,cAAc,CAAC,KAAK,CAAC,cAAc;oBACjD,MAAM,EAAE,gBAAgB,CAAC,MAAM,CAAC,QAAQ,EAAE;oBAE1C,WAAW,EAAE,gBAAgB,CAAC,WAAW;oBACzC,IAAI,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO;iBAC/C,CAAC;aACH,CAAC,CAAC;YAEH,UAAU,CAAC,QAAQ,CAAC,cAAc,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE;gBACjD,cAAc,EAAE,gBAAgB,CAAC,cAAc;gBAC/C,gBAAgB,EAAE,gBAAgB,CAAC,QAAQ;aAC5C,CAAC,CAAC;SACJ;QAAC,OAAO,GAAY,EAAE;YAErB,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACpB;QAGD,OAAO,SAAS,CAAC;IACnB,CAAC;CACF;AAtFD,uDAsFC","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\n/**\r\n * Handler for the Authorization Code with PKCE Flow\r\n */\r\nimport {\r\n  IOidcHandler,\r\n  IOidcOptions,\r\n  IRedirector,\r\n  IStorageUtility,\r\n  LoginResult,\r\n} from \"@inrupt/solid-client-authn-core\";\r\nimport { OidcClient } from \"@inrupt/oidc-client-ext\";\r\n\r\n/**\r\n * @hidden\r\n * Authorization code flow spec: https://openid.net/specs/openid-connect-core-1_0.html#CodeFlowAuth\r\n * PKCE: https://tools.ietf.org/html/rfc7636\r\n */\r\nexport default class AuthorizationCodeWithPkceOidcHandler\r\n  implements IOidcHandler\r\n{\r\n  constructor(\r\n    private storageUtility: IStorageUtility,\r\n    private redirector: IRedirector\r\n  ) {}\r\n\r\n  async canHandle(oidcLoginOptions: IOidcOptions): Promise<boolean> {\r\n    return !!(\r\n      oidcLoginOptions.issuerConfiguration.grantTypesSupported &&\r\n      oidcLoginOptions.issuerConfiguration.grantTypesSupported.indexOf(\r\n        \"authorization_code\"\r\n      ) > -1\r\n    );\r\n  }\r\n\r\n  async handle(oidcLoginOptions: IOidcOptions): Promise<LoginResult> {\r\n    /* eslint-disable camelcase */\r\n    const oidcOptions = {\r\n      authority: oidcLoginOptions.issuer.toString(),\r\n      client_id: oidcLoginOptions.client.clientId,\r\n      client_secret: oidcLoginOptions.client.clientSecret,\r\n      redirect_uri: oidcLoginOptions.redirectUrl.toString(),\r\n      post_logout_redirect_uri: oidcLoginOptions.redirectUrl.toString(),\r\n      response_type: \"code\",\r\n      // The offline_access scope requests that a refresh token be returned.\r\n      scope: \"openid offline_access\",\r\n      filterProtocolClaims: true,\r\n      // The userinfo endpoint on NSS fails, so disable this for now\r\n      // Note that in Solid, information should be retrieved from the\r\n      // profile referenced by the WebId.\r\n      loadUserInfo: false,\r\n      code_verifier: true,\r\n      prompt: oidcLoginOptions.prompt ?? \"consent\",\r\n    };\r\n    /* eslint-enable camelcase */\r\n\r\n    const oidcClientLibrary = new OidcClient(oidcOptions);\r\n\r\n    const { redirector } = this;\r\n    const storage = this.storageUtility;\r\n\r\n    try {\r\n      const signingRequest = await oidcClientLibrary.createSigninRequest();\r\n      await Promise.all([\r\n        // We use the OAuth 'state' value (which should be crypto-random) as\r\n        // the key in our storage to store our actual SessionID. We do this\r\n        // 'cos we'll need to lookup our session information again when the\r\n        // browser is redirected back to us (i.e. the OAuth client\r\n        // application) from the Authorization Server.\r\n        // We don't want to use our session ID as the OAuth 'state' value, as\r\n        // that session ID can be any developer-specified value, and therefore\r\n        // may not be appropriate (since the OAuth 'state' value should really\r\n        // be an unguessable crypto-random value).\r\n        // eslint-disable-next-line no-underscore-dangle\r\n        storage.setForUser(signingRequest.state._id, {\r\n          sessionId: oidcLoginOptions.sessionId,\r\n        }),\r\n\r\n        // Store our login-process state using the session ID as the key.\r\n        // Strictly speaking, this indirection from our OAuth state value to\r\n        // our session ID is unnecessary, but it provides a slightly cleaner\r\n        // separation of concerns.\r\n        storage.setForUser(oidcLoginOptions.sessionId, {\r\n          // eslint-disable-next-line no-underscore-dangle\r\n          codeVerifier: signingRequest.state._code_verifier,\r\n          issuer: oidcLoginOptions.issuer.toString(),\r\n          // The redirect URL is read after redirect, so it must be stored now.\r\n          redirectUrl: oidcLoginOptions.redirectUrl,\r\n          dpop: oidcLoginOptions.dpop ? \"true\" : \"false\",\r\n        }),\r\n      ]);\r\n\r\n      redirector.redirect(signingRequest.url.toString(), {\r\n        handleRedirect: oidcLoginOptions.handleRedirect,\r\n        redirectInIframe: oidcLoginOptions.inIframe,\r\n      });\r\n    } catch (err: unknown) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(err);\r\n    }\r\n\r\n    // The login is only completed AFTER redirect, so nothing to return here.\r\n    return undefined;\r\n  }\r\n}\r\n"]}},"error":null,"hash":"ac9ab25ba68e8f98ea799f917aa96e59","cacheData":{"env":{}}}