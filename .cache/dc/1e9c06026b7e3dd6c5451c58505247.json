{"id":"node_modules/@inrupt/solid-client-authn-core/dist/sessionInfo/ISessionInfo.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\sessionInfo\\ISessionInfo.js.map","includedInParent":true,"mtime":1645788391018},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\src\\sessionInfo\\ISessionInfo.ts","includedInParent":true,"mtime":1645788391050},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645793376876},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\package.json","includedInParent":true,"mtime":1645788391034}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.isSupportedTokenType = void 0;\r\nfunction isSupportedTokenType(token) {\r\n    return typeof token === \"string\" && [\"DPoP\", \"Bearer\"].includes(token);\r\n}\r\nexports.isSupportedTokenType = isSupportedTokenType;\r\n"},"sourceMaps":{"js":{"version":3,"file":"ISessionInfo.js","sourceRoot":"","sources":["../../src/sessionInfo/ISessionInfo.ts"],"names":[],"mappings":";;;AA8FA,SAAgB,oBAAoB,CAClC,KAAiC;IAEjC,OAAO,OAAO,KAAK,KAAK,QAAQ,IAAI,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;AACzE,CAAC;AAJD,oDAIC","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * Defines the data that should be persisted for each session. This interface\r\n * is exposed as part of our public API.\r\n */\r\nexport interface ISessionInfo {\r\n  /**\r\n   * 'true' if the session is currently logged into an associated identity\r\n   * provider.\r\n   */\r\n  isLoggedIn: boolean;\r\n\r\n  /**\r\n   * The WebID if the user is logged into the session, and undefined if not.\r\n   */\r\n  webId?: string;\r\n\r\n  /**\r\n   * The WebID of the app, or a \"Public app\" WebID if the app does not provide its own.\r\n   * undefined until the session is logged in and the app WebID has been verified.\r\n   */\r\n  clientAppId?: string;\r\n\r\n  /**\r\n   * A unique identifier for the session.\r\n   */\r\n  sessionId: string;\r\n\r\n  /**\r\n   * UNIX timestamp (number of milliseconds since Jan 1st 1970) representing the\r\n   * time until which this session is valid.\r\n   */\r\n  expirationDate?: number;\r\n}\r\n\r\n/**\r\n * Captures information about sessions that is persisted in storage, but that\r\n * should not be exposed as part of our public API, and is only used for\r\n * internal purposes. It is complementary to ISessionInfo when retrieving all\r\n * information about a stored session, both public and internal.\r\n */\r\nexport interface ISessionInternalInfo {\r\n  /**\r\n   * The ID token associated with the session (if any).\r\n   */\r\n  idToken?: string;\r\n\r\n  /**\r\n   * The refresh token associated with the session (if any).\r\n   */\r\n  refreshToken?: string;\r\n\r\n  /**\r\n   * The OIDC issuer that issued the tokens authenticating the session.\r\n   */\r\n  issuer?: string;\r\n\r\n  /**\r\n   * The redirect URL registered when initially logging the session in.\r\n   */\r\n  redirectUrl?: string;\r\n\r\n  /**\r\n   * For public clients, and Solid Identity Providers that do not support Client\r\n   * WebIDs, the client secret is still required at the token endpoint.\r\n   */\r\n  clientAppSecret?: string;\r\n\r\n  /**\r\n   * The token type used by the session\r\n   */\r\n  tokenType?: \"DPoP\" | \"Bearer\";\r\n}\r\n\r\nexport function isSupportedTokenType(\r\n  token: string | \"DPoP\" | \"Bearer\"\r\n): token is \"DPoP\" | \"Bearer\" {\r\n  return typeof token === \"string\" && [\"DPoP\", \"Bearer\"].includes(token);\r\n}\r\n"]}},"error":null,"hash":"ff7c90d549c99502c1f5b452febca7e2","cacheData":{"env":{}}}