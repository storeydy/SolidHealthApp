{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js.map","includedInParent":true,"mtime":1645788390836},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\ClientAuthentication.ts","includedInParent":true,"mtime":1645788390944},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645788402217},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\package.json","includedInParent":true,"mtime":1645788390926},{"name":"@inrupt/solid-client-authn-core","loc":{"line":3,"column":42},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\index.js"},{"name":"@inrupt/oidc-client-ext","loc":{"line":4,"column":34},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\oidc-client-ext\\dist\\index.es.js"},{"name":"@inrupt/jose-legacy-modules","loc":{"line":5,"column":38},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\jose-legacy-modules\\dist\\index.browser.js"},{"name":"./constant","loc":{"line":6,"column":27},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\constant.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\r\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\r\nconst jose_legacy_modules_1 = require(\"@inrupt/jose-legacy-modules\");\r\nconst constant_1 = require(\"./constant\");\r\nconst globalFetch = (request, init) => window.fetch(request, init);\r\nclass ClientAuthentication {\r\n    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher) {\r\n        this.loginHandler = loginHandler;\r\n        this.redirectHandler = redirectHandler;\r\n        this.logoutHandler = logoutHandler;\r\n        this.sessionInfoManager = sessionInfoManager;\r\n        this.issuerConfigFetcher = issuerConfigFetcher;\r\n        this.login = async (options, eventEmitter) => {\r\n            var _a, _b;\r\n            await this.sessionInfoManager.clear(options.sessionId);\r\n            const redirectUrl = oidc_client_ext_1.removeOidcQueryParam((_a = options.redirectUrl) !== null && _a !== void 0 ? _a : window.location.href);\r\n            await this.loginHandler.handle({\r\n                ...options,\r\n                redirectUrl,\r\n                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,\r\n                eventEmitter,\r\n            });\r\n        };\r\n        this.fetch = globalFetch;\r\n        this.logout = async (sessionId) => {\r\n            await this.logoutHandler.handle(sessionId);\r\n            this.fetch = globalFetch;\r\n        };\r\n        this.getSessionInfo = async (sessionId) => {\r\n            return this.sessionInfoManager.get(sessionId);\r\n        };\r\n        this.getAllSessionInfo = async () => {\r\n            return this.sessionInfoManager.getAll();\r\n        };\r\n        this.validateCurrentSession = async () => {\r\n            const currentSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);\r\n            if (currentSessionId === null) {\r\n                return null;\r\n            }\r\n            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);\r\n            if (sessionInfo === undefined ||\r\n                sessionInfo.idToken === undefined ||\r\n                sessionInfo.clientAppId === undefined ||\r\n                sessionInfo.issuer === undefined) {\r\n                return null;\r\n            }\r\n            const issuerConfig = await this.issuerConfigFetcher.fetchConfig(sessionInfo.issuer);\r\n            try {\r\n                const jwk = await solid_client_authn_core_1.fetchJwks(issuerConfig.jwksUri, issuerConfig.issuer);\r\n                await jose_legacy_modules_1.jwtVerify(sessionInfo.idToken, await jose_legacy_modules_1.parseJwk(jwk), {\r\n                    audience: sessionInfo.clientAppId,\r\n                    issuer: issuerConfig.issuer,\r\n                });\r\n                return sessionInfo;\r\n            }\r\n            catch (e) {\r\n            }\r\n            return null;\r\n        };\r\n        this.handleIncomingRedirect = async (url, eventEmitter) => {\r\n            const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);\r\n            this.fetch = redirectInfo.fetch.bind(window);\r\n            const cleanedUpUrl = new URL(url);\r\n            cleanedUpUrl.searchParams.delete(\"state\");\r\n            cleanedUpUrl.searchParams.delete(\"code\");\r\n            cleanedUpUrl.searchParams.delete(\"id_token\");\r\n            cleanedUpUrl.searchParams.delete(\"access_token\");\r\n            cleanedUpUrl.searchParams.delete(\"error\");\r\n            cleanedUpUrl.searchParams.delete(\"error_description\");\r\n            window.history.replaceState(null, \"\", cleanedUpUrl.toString());\r\n            return {\r\n                isLoggedIn: redirectInfo.isLoggedIn,\r\n                webId: redirectInfo.webId,\r\n                sessionId: redirectInfo.sessionId,\r\n                expirationDate: redirectInfo.expirationDate,\r\n            };\r\n        };\r\n    }\r\n}\r\nexports.default = ClientAuthentication;\r\n"},"sourceMaps":{"js":{"version":3,"file":"ClientAuthentication.js","sourceRoot":"","sources":["../src/ClientAuthentication.ts"],"names":[],"mappings":"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","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\nimport {\r\n  ILoginHandler,\r\n  ILogoutHandler,\r\n  IRedirectHandler,\r\n  ISessionInfo,\r\n  ISessionInfoManager,\r\n  IIssuerConfigFetcher,\r\n  ISessionInternalInfo,\r\n  ILoginOptions,\r\n  fetchJwks,\r\n} from \"@inrupt/solid-client-authn-core\";\r\nimport { removeOidcQueryParam } from \"@inrupt/oidc-client-ext\";\r\nimport { jwtVerify, parseJwk } from \"@inrupt/jose-legacy-modules\";\r\nimport { EventEmitter } from \"events\";\r\nimport { KEY_CURRENT_SESSION } from \"./constant\";\r\n\r\n// By only referring to `window` at runtime, apps that do server-side rendering\r\n// won't run into errors when rendering code that instantiates a\r\n// ClientAuthentication:\r\nconst globalFetch: typeof window.fetch = (request, init) =>\r\n  window.fetch(request, init);\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport default class ClientAuthentication {\r\n  constructor(\r\n    private loginHandler: ILoginHandler,\r\n    private redirectHandler: IRedirectHandler,\r\n    private logoutHandler: ILogoutHandler,\r\n    private sessionInfoManager: ISessionInfoManager,\r\n    private issuerConfigFetcher: IIssuerConfigFetcher\r\n  ) {}\r\n\r\n  // Define these functions as properties so that they don't get accidentally re-bound.\r\n  // Isn't Javascript fun?\r\n  login = async (\r\n    options: ILoginOptions,\r\n    eventEmitter: EventEmitter\r\n  ): Promise<void> => {\r\n    // In order to get a clean start, make sure that the session is logged out\r\n    // on login.\r\n    // But we may want to preserve our client application info, particularly if\r\n    // we used Dynamic Client Registration to register (since we don't\r\n    // necessarily want the user to have to register this app each time they\r\n    // login).\r\n    await this.sessionInfoManager.clear(options.sessionId);\r\n\r\n    // In the case of the user hitting the 'back' button in their browser, they\r\n    // could return to a previous redirect URL that contains OIDC params that\r\n    // are now longer valid - so just to be safe, strip relevant params now.\r\n    const redirectUrl = removeOidcQueryParam(\r\n      options.redirectUrl ?? window.location.href\r\n    );\r\n\r\n    await this.loginHandler.handle({\r\n      ...options,\r\n      redirectUrl,\r\n      // If no clientName is provided, the clientId may be used instead.\r\n      clientName: options.clientName ?? options.clientId,\r\n      eventEmitter,\r\n    });\r\n  };\r\n\r\n  // By default, our fetch() resolves to the environment fetch() function.\r\n  fetch = globalFetch;\r\n\r\n  logout = async (sessionId: string): Promise<void> => {\r\n    await this.logoutHandler.handle(sessionId);\r\n\r\n    // Restore our fetch() function back to the environment fetch(), effectively\r\n    // leaving us with un-authenticated fetches from now on.\r\n    this.fetch = globalFetch;\r\n  };\r\n\r\n  getSessionInfo = async (\r\n    sessionId: string\r\n  ): Promise<(ISessionInfo & ISessionInternalInfo) | undefined> => {\r\n    // TODO complete\r\n    return this.sessionInfoManager.get(sessionId);\r\n  };\r\n\r\n  getAllSessionInfo = async (): Promise<ISessionInfo[]> => {\r\n    return this.sessionInfoManager.getAll();\r\n  };\r\n\r\n  validateCurrentSession = async (): Promise<\r\n    (ISessionInfo & ISessionInternalInfo) | null\r\n  > => {\r\n    const currentSessionId = window.localStorage.getItem(KEY_CURRENT_SESSION);\r\n    if (currentSessionId === null) {\r\n      return null;\r\n    }\r\n    const sessionInfo = await this.sessionInfoManager.get(currentSessionId);\r\n    // Several types of session data are required in order to validate that the ID\r\n    // token in storage hasn't been tampered with, and has actually been issued\r\n    // by the issuer present in storage.\r\n    if (\r\n      sessionInfo === undefined ||\r\n      sessionInfo.idToken === undefined ||\r\n      sessionInfo.clientAppId === undefined ||\r\n      sessionInfo.issuer === undefined\r\n    ) {\r\n      return null;\r\n    }\r\n    const issuerConfig = await this.issuerConfigFetcher.fetchConfig(\r\n      sessionInfo.issuer\r\n    );\r\n\r\n    try {\r\n      const jwk = await fetchJwks(issuerConfig.jwksUri, issuerConfig.issuer);\r\n      await jwtVerify(sessionInfo.idToken, await parseJwk(jwk), {\r\n        audience: sessionInfo.clientAppId,\r\n        issuer: issuerConfig.issuer,\r\n      });\r\n      return sessionInfo;\r\n    } catch (e) {\r\n      // The jwt verification function throws on invalid token.\r\n      // The error is swallowed, and `null` is eventually returned.\r\n    }\r\n    return null;\r\n  };\r\n\r\n  handleIncomingRedirect = async (\r\n    url: string,\r\n    eventEmitter: EventEmitter\r\n  ): Promise<ISessionInfo | undefined> => {\r\n    const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);\r\n    // The `FallbackRedirectHandler` directly returns the global `fetch` for\r\n    // his value, so we should ensure it's bound to `window` rather than to\r\n    // ClientAuthentication, to avoid the following error:\r\n    // > 'fetch' called on an object that does not implement interface Window.\r\n    this.fetch = redirectInfo.fetch.bind(window);\r\n\r\n    const cleanedUpUrl = new URL(url);\r\n    cleanedUpUrl.searchParams.delete(\"state\");\r\n    // For auth code flow\r\n    cleanedUpUrl.searchParams.delete(\"code\");\r\n    // For implicit flow\r\n    cleanedUpUrl.searchParams.delete(\"id_token\");\r\n    cleanedUpUrl.searchParams.delete(\"access_token\");\r\n    // For login error\r\n    cleanedUpUrl.searchParams.delete(\"error\");\r\n    cleanedUpUrl.searchParams.delete(\"error_description\");\r\n\r\n    // Remove OAuth-specific query params (since the login flow finishes with\r\n    // the browser being redirected back with OAuth2 query params (e.g. for\r\n    // 'code' and 'state'), and so if the user simply refreshes this page our\r\n    // authentication library will be called again with what are now invalid\r\n    // query parameters!).\r\n    window.history.replaceState(null, \"\", cleanedUpUrl.toString());\r\n\r\n    return {\r\n      isLoggedIn: redirectInfo.isLoggedIn,\r\n      webId: redirectInfo.webId,\r\n      sessionId: redirectInfo.sessionId,\r\n      expirationDate: redirectInfo.expirationDate,\r\n    };\r\n  };\r\n}\r\n"]}},"error":null,"hash":"75041c3ebf25b60a072e350c1d712529","cacheData":{"env":{}}}