{"id":"node_modules/@inrupt/solid-client-authn-core/dist/login/oidc/redirectHandler/IRedirectHandler.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\login\\oidc\\redirectHandler\\IRedirectHandler.js.map","includedInParent":true,"mtime":1645788391011},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\src\\login\\oidc\\redirectHandler\\IRedirectHandler.ts","includedInParent":true,"mtime":1645788391047},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645788402217},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\package.json","includedInParent":true,"mtime":1645788391034},{"name":"cross-fetch","loc":{"line":4,"column":30},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\login\\oidc\\redirectHandler\\IRedirectHandler.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\cross-fetch\\dist\\browser-ponyfill.js"},{"name":"@inrupt/jose-legacy-modules","loc":{"line":5,"column":38},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\login\\oidc\\redirectHandler\\IRedirectHandler.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\jose-legacy-modules\\dist\\index.browser.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.getWebidFromTokenPayload = exports.fetchJwks = void 0;\r\nconst cross_fetch_1 = require(\"cross-fetch\");\r\nconst jose_legacy_modules_1 = require(\"@inrupt/jose-legacy-modules\");\r\nasync function fetchJwks(jwksIri, issuerIri) {\r\n    const jwksResponse = await cross_fetch_1.fetch(jwksIri);\r\n    if (jwksResponse.status !== 200) {\r\n        throw new Error(`Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`);\r\n    }\r\n    let jwk;\r\n    try {\r\n        jwk = (await jwksResponse.json()).keys[0];\r\n    }\r\n    catch (e) {\r\n        throw new Error(`Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`);\r\n    }\r\n    return jwk;\r\n}\r\nexports.fetchJwks = fetchJwks;\r\nasync function getWebidFromTokenPayload(idToken, jwksIri, issuerIri, clientId) {\r\n    const jwk = await fetchJwks(jwksIri, issuerIri);\r\n    let payload;\r\n    try {\r\n        const { payload: verifiedPayload } = await jose_legacy_modules_1.jwtVerify(idToken, await jose_legacy_modules_1.parseJwk(jwk), {\r\n            issuer: issuerIri,\r\n            audience: clientId,\r\n        });\r\n        payload = verifiedPayload;\r\n    }\r\n    catch (e) {\r\n        throw new Error(`ID token verification failed: ${e.stack}`);\r\n    }\r\n    if (typeof payload.webid === \"string\") {\r\n        return payload.webid;\r\n    }\r\n    if (typeof payload.sub !== \"string\") {\r\n        throw new Error(`The ID token ${JSON.stringify(payload)} is invalid: it has no 'webid' claim and no 'sub' claim.`);\r\n    }\r\n    try {\r\n        new URL(payload.sub);\r\n        return payload.sub;\r\n    }\r\n    catch (e) {\r\n        throw new Error(`The ID token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`);\r\n    }\r\n}\r\nexports.getWebidFromTokenPayload = getWebidFromTokenPayload;\r\n"},"sourceMaps":{"js":{"version":3,"file":"IRedirectHandler.js","sourceRoot":"","sources":["../../../../src/login/oidc/redirectHandler/IRedirectHandler.ts"],"names":[],"mappings":";;;AA2BA,6CAAoC;AACpC,qEAKqC;AAmB9B,KAAK,UAAU,SAAS,CAC7B,OAAe,EACf,SAAiB;IAMjB,MAAM,YAAY,GAAG,MAAM,mBAAK,CAAC,OAAO,CAAC,CAAC;IAC1C,IAAI,YAAY,CAAC,MAAM,KAAK,GAAG,EAAE;QAC/B,MAAM,IAAI,KAAK,CACb,6BAA6B,SAAS,SAAS,OAAO,MAAM,YAAY,CAAC,MAAM,IAAI,YAAY,CAAC,UAAU,EAAE,CAC7G,CAAC;KACH;IAED,IAAI,GAAQ,CAAC;IACb,IAAI;QACF,GAAG,GAAG,CAAC,MAAM,YAAY,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAQ,CAAC;KAClD;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CACb,uBAAuB,SAAS,SAAS,OAAO,MAAM,CAAC,CAAC,OAAO,EAAE,CAClE,CAAC;KACH;IACD,OAAO,GAAG,CAAC;AACb,CAAC;AAxBD,8BAwBC;AAWM,KAAK,UAAU,wBAAwB,CAC5C,OAAe,EACf,OAAe,EACf,SAAiB,EACjB,QAAgB;IAEhB,MAAM,GAAG,GAAG,MAAM,SAAS,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;IAChD,IAAI,OAAmB,CAAC;IACxB,IAAI;QACF,MAAM,EAAE,OAAO,EAAE,eAAe,EAAE,GAAG,MAAM,+BAAS,CAClD,OAAO,EACP,MAAM,8BAAQ,CAAC,GAAG,CAAC,EACnB;YACE,MAAM,EAAE,SAAS;YACjB,QAAQ,EAAE,QAAQ;SACnB,CACF,CAAC;QACF,OAAO,GAAG,eAAe,CAAC;KAC3B;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,iCAAiC,CAAC,CAAC,KAAK,EAAE,CAAC,CAAC;KAC7D;IAED,IAAI,OAAO,OAAO,CAAC,KAAK,KAAK,QAAQ,EAAE;QACrC,OAAO,OAAO,CAAC,KAAK,CAAC;KACtB;IACD,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,QAAQ,EAAE;QACnC,MAAM,IAAI,KAAK,CACb,gBAAgB,IAAI,CAAC,SAAS,CAC5B,OAAO,CACR,0DAA0D,CAC5D,CAAC;KACH;IACD,IAAI;QAKF,IAAI,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;QACrB,OAAO,OAAO,CAAC,GAAG,CAAC;KACpB;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CACb,8DAA8D,OAAO,CAAC,GAAG,kCAAkC,CAAC,IAAI,CACjH,CAAC;KACH;AACH,CAAC;AA5CD,4DA4CC","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\n// eslint-disable-next-line no-shadow\r\nimport { fetch } from \"cross-fetch\";\r\nimport {\r\n  JWK,\r\n  JWTPayload,\r\n  jwtVerify,\r\n  parseJwk,\r\n} from \"@inrupt/jose-legacy-modules\";\r\nimport { EventEmitter } from \"events\";\r\nimport IHandleable from \"../../../util/handlerPattern/IHandleable\";\r\nimport { ISessionInfo } from \"../../../sessionInfo/ISessionInfo\";\r\n\r\nexport type RedirectResult = ISessionInfo & { fetch: typeof fetch };\r\nexport type RedirectInput = [string, EventEmitter | undefined];\r\n\r\n/**\r\n * @hidden\r\n */\r\ntype IRedirectHandler = IHandleable<\r\n  // Tuple of the URL to redirect to, an optional event listener for when\r\n  // we receive a new refresh token, and, an optional onError function:\r\n  RedirectInput,\r\n  RedirectResult\r\n>;\r\nexport default IRedirectHandler;\r\n\r\nexport async function fetchJwks(\r\n  jwksIri: string,\r\n  issuerIri: string\r\n): Promise<JWK> {\r\n  // FIXME: the following line works, but the underlying network calls don't seem\r\n  // to be mocked properly by our test code. It would be nicer to replace calls to this\r\n  // function by the following line and to fix the mocks.\r\n  // const jwks = createRemoteJWKSet(new URL(jwksIri));\r\n  const jwksResponse = await fetch(jwksIri);\r\n  if (jwksResponse.status !== 200) {\r\n    throw new Error(\r\n      `Could not fetch JWKS for [${issuerIri}] at [${jwksIri}]: ${jwksResponse.status} ${jwksResponse.statusText}`\r\n    );\r\n  }\r\n  // The JWKS should only contain the current key for the issuer.\r\n  let jwk: JWK;\r\n  try {\r\n    jwk = (await jwksResponse.json()).keys[0] as JWK;\r\n  } catch (e) {\r\n    throw new Error(\r\n      `Malformed JWKS for [${issuerIri}] at [${jwksIri}]: ${e.message}`\r\n    );\r\n  }\r\n  return jwk;\r\n}\r\n\r\n/**\r\n * Extract a WebID from an ID token payload based on https://github.com/solid/webid-oidc-spec.\r\n * Note that this does not yet implement the user endpoint lookup, and only checks\r\n * for `webid` or IRI-like `sub` claims.\r\n *\r\n * @param idToken the payload of the ID token from which the WebID can be extracted.\r\n * @returns a WebID extracted from the ID token.\r\n * @internal\r\n */\r\nexport async function getWebidFromTokenPayload(\r\n  idToken: string,\r\n  jwksIri: string,\r\n  issuerIri: string,\r\n  clientId: string\r\n): Promise<string> {\r\n  const jwk = await fetchJwks(jwksIri, issuerIri);\r\n  let payload: JWTPayload;\r\n  try {\r\n    const { payload: verifiedPayload } = await jwtVerify(\r\n      idToken,\r\n      await parseJwk(jwk),\r\n      {\r\n        issuer: issuerIri,\r\n        audience: clientId,\r\n      }\r\n    );\r\n    payload = verifiedPayload;\r\n  } catch (e) {\r\n    throw new Error(`ID token verification failed: ${e.stack}`);\r\n  }\r\n\r\n  if (typeof payload.webid === \"string\") {\r\n    return payload.webid;\r\n  }\r\n  if (typeof payload.sub !== \"string\") {\r\n    throw new Error(\r\n      `The ID token ${JSON.stringify(\r\n        payload\r\n      )} is invalid: it has no 'webid' claim and no 'sub' claim.`\r\n    );\r\n  }\r\n  try {\r\n    // This parses the 'sub' claim to check if it is a well-formed IRI.\r\n    // However, the normalized value isn't returned to make sure the WebID is returned\r\n    // as specified by the Identity Provider.\r\n    // eslint-disable-next-line no-new\r\n    new URL(payload.sub);\r\n    return payload.sub;\r\n  } catch (e) {\r\n    throw new Error(\r\n      `The ID token has no 'webid' claim, and its 'sub' claim of [${payload.sub}] is invalid as a URL - error [${e}].`\r\n    );\r\n  }\r\n}\r\n"]}},"error":null,"hash":"a40be6b0be6ef4ee6bc1afa53aca537e","cacheData":{"env":{}}}