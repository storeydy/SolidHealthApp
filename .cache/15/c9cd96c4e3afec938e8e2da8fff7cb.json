{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/ClientAuthentication.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\ClientAuthentication.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\package.json","includedInParent":true,"mtime":1643281048105},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-browser\\package.json","includedInParent":true,"mtime":1643233902805},{"name":"@inrupt/solid-client-authn-core","loc":{"line":3,"column":42},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\index.js"},{"name":"@inrupt/oidc-client-ext","loc":{"line":4,"column":34},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\oidc-client-ext\\dist\\index.es.js"},{"name":"@inrupt/jose-legacy-modules","loc":{"line":5,"column":38},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\jose-legacy-modules\\dist\\index.browser.js"},{"name":"./constant","loc":{"line":6,"column":27},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\ClientAuthentication.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\solid-health-app\\inrupt-solid-app\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\constant.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\nconst oidc_client_ext_1 = require(\"@inrupt/oidc-client-ext\");\nconst jose_legacy_modules_1 = require(\"@inrupt/jose-legacy-modules\");\nconst constant_1 = require(\"./constant\");\nconst globalFetch = (request, init) => window.fetch(request, init);\nclass ClientAuthentication {\n    constructor(loginHandler, redirectHandler, logoutHandler, sessionInfoManager, issuerConfigFetcher) {\n        this.loginHandler = loginHandler;\n        this.redirectHandler = redirectHandler;\n        this.logoutHandler = logoutHandler;\n        this.sessionInfoManager = sessionInfoManager;\n        this.issuerConfigFetcher = issuerConfigFetcher;\n        this.login = async (options, eventEmitter) => {\n            var _a, _b;\n            await this.sessionInfoManager.clear(options.sessionId);\n            const redirectUrl = oidc_client_ext_1.removeOidcQueryParam((_a = options.redirectUrl) !== null && _a !== void 0 ? _a : window.location.href);\n            await this.loginHandler.handle({\n                ...options,\n                redirectUrl,\n                clientName: (_b = options.clientName) !== null && _b !== void 0 ? _b : options.clientId,\n                eventEmitter,\n            });\n        };\n        this.fetch = globalFetch;\n        this.logout = async (sessionId) => {\n            await this.logoutHandler.handle(sessionId);\n            this.fetch = globalFetch;\n        };\n        this.getSessionInfo = async (sessionId) => {\n            return this.sessionInfoManager.get(sessionId);\n        };\n        this.getAllSessionInfo = async () => {\n            return this.sessionInfoManager.getAll();\n        };\n        this.validateCurrentSession = async () => {\n            const currentSessionId = window.localStorage.getItem(constant_1.KEY_CURRENT_SESSION);\n            if (currentSessionId === null) {\n                return null;\n            }\n            const sessionInfo = await this.sessionInfoManager.get(currentSessionId);\n            if (sessionInfo === undefined ||\n                sessionInfo.idToken === undefined ||\n                sessionInfo.clientAppId === undefined ||\n                sessionInfo.issuer === undefined) {\n                return null;\n            }\n            const issuerConfig = await this.issuerConfigFetcher.fetchConfig(sessionInfo.issuer);\n            try {\n                const jwk = await solid_client_authn_core_1.fetchJwks(issuerConfig.jwksUri, issuerConfig.issuer);\n                await jose_legacy_modules_1.jwtVerify(sessionInfo.idToken, await jose_legacy_modules_1.parseJwk(jwk), {\n                    audience: sessionInfo.clientAppId,\n                    issuer: issuerConfig.issuer,\n                });\n                return sessionInfo;\n            }\n            catch (e) {\n            }\n            return null;\n        };\n        this.handleIncomingRedirect = async (url, eventEmitter) => {\n            const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);\n            this.fetch = redirectInfo.fetch.bind(window);\n            const cleanedUpUrl = new URL(url);\n            cleanedUpUrl.searchParams.delete(\"state\");\n            cleanedUpUrl.searchParams.delete(\"code\");\n            cleanedUpUrl.searchParams.delete(\"id_token\");\n            cleanedUpUrl.searchParams.delete(\"access_token\");\n            cleanedUpUrl.searchParams.delete(\"error\");\n            cleanedUpUrl.searchParams.delete(\"error_description\");\n            window.history.replaceState(null, \"\", cleanedUpUrl.toString());\n            return {\n                isLoggedIn: redirectInfo.isLoggedIn,\n                webId: redirectInfo.webId,\n                sessionId: redirectInfo.sessionId,\n                expirationDate: redirectInfo.expirationDate,\n            };\n        };\n    }\n}\nexports.default = ClientAuthentication;\n"},"sourceMaps":{"js":{"version":3,"file":"ClientAuthentication.js","sourceRoot":"","sources":["../src/ClientAuthentication.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright 2021 Inrupt Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal in\n * the Software without restriction, including without limitation the rights to use,\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\n * Software, and to permit persons to whom the Software is furnished to do so,\n * subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/**\n * @hidden\n * @packageDocumentation\n */\n\nimport {\n  ILoginHandler,\n  ILogoutHandler,\n  IRedirectHandler,\n  ISessionInfo,\n  ISessionInfoManager,\n  IIssuerConfigFetcher,\n  ISessionInternalInfo,\n  ILoginOptions,\n  fetchJwks,\n} from \"@inrupt/solid-client-authn-core\";\nimport { removeOidcQueryParam } from \"@inrupt/oidc-client-ext\";\nimport { jwtVerify, parseJwk } from \"@inrupt/jose-legacy-modules\";\nimport { EventEmitter } from \"events\";\nimport { KEY_CURRENT_SESSION } from \"./constant\";\n\n// By only referring to `window` at runtime, apps that do server-side rendering\n// won't run into errors when rendering code that instantiates a\n// ClientAuthentication:\nconst globalFetch: typeof window.fetch = (request, init) =>\n  window.fetch(request, init);\n\n/**\n * @hidden\n */\nexport default class ClientAuthentication {\n  constructor(\n    private loginHandler: ILoginHandler,\n    private redirectHandler: IRedirectHandler,\n    private logoutHandler: ILogoutHandler,\n    private sessionInfoManager: ISessionInfoManager,\n    private issuerConfigFetcher: IIssuerConfigFetcher\n  ) {}\n\n  // Define these functions as properties so that they don't get accidentally re-bound.\n  // Isn't Javascript fun?\n  login = async (\n    options: ILoginOptions,\n    eventEmitter: EventEmitter\n  ): Promise<void> => {\n    // In order to get a clean start, make sure that the session is logged out\n    // on login.\n    // But we may want to preserve our client application info, particularly if\n    // we used Dynamic Client Registration to register (since we don't\n    // necessarily want the user to have to register this app each time they\n    // login).\n    await this.sessionInfoManager.clear(options.sessionId);\n\n    // In the case of the user hitting the 'back' button in their browser, they\n    // could return to a previous redirect URL that contains OIDC params that\n    // are now longer valid - so just to be safe, strip relevant params now.\n    const redirectUrl = removeOidcQueryParam(\n      options.redirectUrl ?? window.location.href\n    );\n\n    await this.loginHandler.handle({\n      ...options,\n      redirectUrl,\n      // If no clientName is provided, the clientId may be used instead.\n      clientName: options.clientName ?? options.clientId,\n      eventEmitter,\n    });\n  };\n\n  // By default, our fetch() resolves to the environment fetch() function.\n  fetch = globalFetch;\n\n  logout = async (sessionId: string): Promise<void> => {\n    await this.logoutHandler.handle(sessionId);\n\n    // Restore our fetch() function back to the environment fetch(), effectively\n    // leaving us with un-authenticated fetches from now on.\n    this.fetch = globalFetch;\n  };\n\n  getSessionInfo = async (\n    sessionId: string\n  ): Promise<(ISessionInfo & ISessionInternalInfo) | undefined> => {\n    // TODO complete\n    return this.sessionInfoManager.get(sessionId);\n  };\n\n  getAllSessionInfo = async (): Promise<ISessionInfo[]> => {\n    return this.sessionInfoManager.getAll();\n  };\n\n  validateCurrentSession = async (): Promise<\n    (ISessionInfo & ISessionInternalInfo) | null\n  > => {\n    const currentSessionId = window.localStorage.getItem(KEY_CURRENT_SESSION);\n    if (currentSessionId === null) {\n      return null;\n    }\n    const sessionInfo = await this.sessionInfoManager.get(currentSessionId);\n    // Several types of session data are required in order to validate that the ID\n    // token in storage hasn't been tampered with, and has actually been issued\n    // by the issuer present in storage.\n    if (\n      sessionInfo === undefined ||\n      sessionInfo.idToken === undefined ||\n      sessionInfo.clientAppId === undefined ||\n      sessionInfo.issuer === undefined\n    ) {\n      return null;\n    }\n    const issuerConfig = await this.issuerConfigFetcher.fetchConfig(\n      sessionInfo.issuer\n    );\n\n    try {\n      const jwk = await fetchJwks(issuerConfig.jwksUri, issuerConfig.issuer);\n      await jwtVerify(sessionInfo.idToken, await parseJwk(jwk), {\n        audience: sessionInfo.clientAppId,\n        issuer: issuerConfig.issuer,\n      });\n      return sessionInfo;\n    } catch (e) {\n      // The jwt verification function throws on invalid token.\n      // The error is swallowed, and `null` is eventually returned.\n    }\n    return null;\n  };\n\n  handleIncomingRedirect = async (\n    url: string,\n    eventEmitter: EventEmitter\n  ): Promise<ISessionInfo | undefined> => {\n    const redirectInfo = await this.redirectHandler.handle(url, eventEmitter);\n    // The `FallbackRedirectHandler` directly returns the global `fetch` for\n    // his value, so we should ensure it's bound to `window` rather than to\n    // ClientAuthentication, to avoid the following error:\n    // > 'fetch' called on an object that does not implement interface Window.\n    this.fetch = redirectInfo.fetch.bind(window);\n\n    const cleanedUpUrl = new URL(url);\n    cleanedUpUrl.searchParams.delete(\"state\");\n    // For auth code flow\n    cleanedUpUrl.searchParams.delete(\"code\");\n    // For implicit flow\n    cleanedUpUrl.searchParams.delete(\"id_token\");\n    cleanedUpUrl.searchParams.delete(\"access_token\");\n    // For login error\n    cleanedUpUrl.searchParams.delete(\"error\");\n    cleanedUpUrl.searchParams.delete(\"error_description\");\n\n    // Remove OAuth-specific query params (since the login flow finishes with\n    // the browser being redirected back with OAuth2 query params (e.g. for\n    // 'code' and 'state'), and so if the user simply refreshes this page our\n    // authentication library will be called again with what are now invalid\n    // query parameters!).\n    window.history.replaceState(null, \"\", cleanedUpUrl.toString());\n\n    return {\n      isLoggedIn: redirectInfo.isLoggedIn,\n      webId: redirectInfo.webId,\n      sessionId: redirectInfo.sessionId,\n      expirationDate: redirectInfo.expirationDate,\n    };\n  };\n}\n"]}},"error":null,"hash":"3330bbc51256821ff8d4104e01e0c23b","cacheData":{"env":{}}}