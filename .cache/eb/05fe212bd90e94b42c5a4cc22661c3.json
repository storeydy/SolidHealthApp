{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/login/oidc/redirectHandler/ErrorOidcHandler.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\redirectHandler\\ErrorOidcHandler.js.map","includedInParent":true,"mtime":1645788390858},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\login\\oidc\\redirectHandler\\ErrorOidcHandler.ts","includedInParent":true,"mtime":1645788390963},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645793376876},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\package.json","includedInParent":true,"mtime":1645788390926},{"name":"@inrupt/solid-client-authn-core","loc":{"line":4,"column":42},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\redirectHandler\\ErrorOidcHandler.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\index.js"},{"name":"../../../sessionInfo/SessionInfoManager","loc":{"line":5,"column":37},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\login\\oidc\\redirectHandler\\ErrorOidcHandler.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\sessionInfo\\SessionInfoManager.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.ErrorOidcHandler = void 0;\r\nconst solid_client_authn_core_1 = require(\"@inrupt/solid-client-authn-core\");\r\nconst SessionInfoManager_1 = require(\"../../../sessionInfo/SessionInfoManager\");\r\nclass ErrorOidcHandler {\r\n    async canHandle(redirectUrl) {\r\n        try {\r\n            return new URL(redirectUrl).searchParams.has(\"error\");\r\n        }\r\n        catch (e) {\r\n            throw new Error(`[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e.toString()}`);\r\n        }\r\n    }\r\n    async handle(redirectUrl, eventEmitter) {\r\n        if (eventEmitter !== undefined) {\r\n            const url = new URL(redirectUrl);\r\n            const errorUrl = url.searchParams.get(\"error\");\r\n            const errorDescriptionUrl = url.searchParams.get(\"error_description\");\r\n            eventEmitter.emit(solid_client_authn_core_1.EVENTS.ERROR, errorUrl, errorDescriptionUrl);\r\n        }\r\n        return SessionInfoManager_1.getUnauthenticatedSession();\r\n    }\r\n}\r\nexports.ErrorOidcHandler = ErrorOidcHandler;\r\n"},"sourceMaps":{"js":{"version":3,"file":"ErrorOidcHandler.js","sourceRoot":"","sources":["../../../../src/login/oidc/redirectHandler/ErrorOidcHandler.ts"],"names":[],"mappings":";;;AA0BA,6EAIyC;AAGzC,gFAAoF;AAQpF,MAAa,gBAAgB;IAC3B,KAAK,CAAC,SAAS,CAAC,WAAmB;QACjC,IAAI;YAEF,OAAO,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SACvD;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,IAAI,KAAK,CACb,IAAI,WAAW,+DAA+D,CAAC,CAAC,QAAQ,EAAE,EAAE,CAC7F,CAAC;SACH;IACH,CAAC;IAED,KAAK,CAAC,MAAM,CACV,WAAmB,EACnB,YAA2B;QAE3B,IAAI,YAAY,KAAK,SAAS,EAAE;YAC9B,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC;YACjC,MAAM,QAAQ,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC/C,MAAM,mBAAmB,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC;YACtE,YAAY,CAAC,IAAI,CAAC,gCAAM,CAAC,KAAK,EAAE,QAAQ,EAAE,mBAAmB,CAAC,CAAC;SAChE;QACD,OAAO,8CAAyB,EAAE,CAAC;IACrC,CAAC;CACF;AAxBD,4CAwBC","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\nimport {\r\n  EVENTS,\r\n  IRedirectHandler,\r\n  ISessionInfo,\r\n} from \"@inrupt/solid-client-authn-core\";\r\nimport type { EventEmitter } from \"events\";\r\n\r\nimport { getUnauthenticatedSession } from \"../../../sessionInfo/SessionInfoManager\";\r\n\r\n/**\r\n * This class handles redirect IRIs without any query params, and returns an unauthenticated\r\n * session. It serves as a fallback so that consuming libraries don't have to test\r\n * for the query params themselves, and can always try to use them as a redirect IRI.\r\n * @hidden\r\n */\r\nexport class ErrorOidcHandler implements IRedirectHandler {\r\n  async canHandle(redirectUrl: string): Promise<boolean> {\r\n    try {\r\n      // eslint-disable-next-line no-new\r\n      return new URL(redirectUrl).searchParams.has(\"error\");\r\n    } catch (e) {\r\n      throw new Error(\r\n        `[${redirectUrl}] is not a valid URL, and cannot be used as a redirect URL: ${e.toString()}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async handle(\r\n    redirectUrl: string,\r\n    eventEmitter?: EventEmitter\r\n  ): Promise<ISessionInfo & { fetch: typeof fetch }> {\r\n    if (eventEmitter !== undefined) {\r\n      const url = new URL(redirectUrl);\r\n      const errorUrl = url.searchParams.get(\"error\");\r\n      const errorDescriptionUrl = url.searchParams.get(\"error_description\");\r\n      eventEmitter.emit(EVENTS.ERROR, errorUrl, errorDescriptionUrl);\r\n    }\r\n    return getUnauthenticatedSession();\r\n  }\r\n}\r\n"]}},"error":null,"hash":"a1c4467a683a0c350136fcb2a2a78b55","cacheData":{"env":{}}}