{"id":"node_modules/@inrupt/solid-client-authn-browser/dist/logout/GeneralLogoutHandler.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\dist\\logout\\GeneralLogoutHandler.js.map","includedInParent":true,"mtime":1645788390863},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\src\\logout\\GeneralLogoutHandler.ts","includedInParent":true,"mtime":1645788390968},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645788402217},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-browser\\package.json","includedInParent":true,"mtime":1645788390926}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass GeneralLogoutHandler {\r\n    constructor(sessionInfoManager) {\r\n        this.sessionInfoManager = sessionInfoManager;\r\n    }\r\n    async canHandle() {\r\n        return true;\r\n    }\r\n    async handle(userId) {\r\n        await this.sessionInfoManager.clear(userId);\r\n    }\r\n}\r\nexports.default = GeneralLogoutHandler;\r\n"},"sourceMaps":{"js":{"version":3,"file":"GeneralLogoutHandler.js","sourceRoot":"","sources":["../../src/logout/GeneralLogoutHandler.ts"],"names":[],"mappings":";;AAkCA,MAAqB,oBAAoB;IACvC,YAAoB,kBAAuC;QAAvC,uBAAkB,GAAlB,kBAAkB,CAAqB;IAAG,CAAC;IAE/D,KAAK,CAAC,SAAS;QACb,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,MAAM,CAAC,MAAc;QACzB,MAAM,IAAI,CAAC,kBAAkB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAC9C,CAAC;CACF;AAVD,uCAUC","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\nimport {\r\n  ILogoutHandler,\r\n  ISessionInfoManager,\r\n} from \"@inrupt/solid-client-authn-core\";\r\n\r\n/**\r\n * @hidden\r\n */\r\nexport default class GeneralLogoutHandler implements ILogoutHandler {\r\n  constructor(private sessionInfoManager: ISessionInfoManager) {}\r\n\r\n  async canHandle(): Promise<boolean> {\r\n    return true;\r\n  }\r\n\r\n  async handle(userId: string): Promise<void> {\r\n    await this.sessionInfoManager.clear(userId);\r\n  }\r\n}\r\n"]}},"error":null,"hash":"2679ce2af04738ac68436d569e513448","cacheData":{"env":{}}}