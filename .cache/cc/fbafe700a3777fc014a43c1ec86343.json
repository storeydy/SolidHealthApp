{"id":"node_modules/@inrupt/solid-client-authn-core/dist/errors/OidcProviderError.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\errors\\OidcProviderError.js.map","includedInParent":true,"mtime":1645788390994},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\src\\errors\\OidcProviderError.ts","includedInParent":true,"mtime":1645788391040},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645788402217},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\package.json","includedInParent":true,"mtime":1645788391034}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.OidcProviderError = void 0;\r\nclass OidcProviderError extends Error {\r\n    constructor(message, error, errorDescription) {\r\n        super(message);\r\n        this.error = error;\r\n        this.errorDescription = errorDescription;\r\n    }\r\n}\r\nexports.OidcProviderError = OidcProviderError;\r\n"},"sourceMaps":{"js":{"version":3,"file":"OidcProviderError.js","sourceRoot":"","sources":["../../src/errors/OidcProviderError.ts"],"names":[],"mappings":";;;AAoCA,MAAa,iBAAkB,SAAQ,KAAK;IAE1C,YACE,OAAe,EACC,KAAa,EACb,gBAAyB;QAEzC,KAAK,CAAC,OAAO,CAAC,CAAC;QAHC,UAAK,GAAL,KAAK,CAAQ;QACb,qBAAgB,GAAhB,gBAAgB,CAAS;IAG3C,CAAC;CACF;AATD,8CASC","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\n/**\r\n * @hidden\r\n * @packageDocumentation\r\n */\r\n\r\n/**\r\n * Error to be triggered when receiving a response missing mandatory elements\r\n */\r\n\r\n// NOTE: There's a bug with istanbul and typescript that prevents full branch coverages\r\n// https://github.com/gotwarlost/istanbul/issues/690\r\n// The workaround is to put istanbul ignore on the constructor\r\n/**\r\n * @hidden\r\n */\r\nexport class OidcProviderError extends Error {\r\n  /* istanbul ignore next */\r\n  constructor(\r\n    message: string,\r\n    public readonly error: string,\r\n    public readonly errorDescription?: string\r\n  ) {\r\n    super(message);\r\n  }\r\n}\r\n"]}},"error":null,"hash":"d083aabf338af07c7e9e38a7140af97e","cacheData":{"env":{}}}