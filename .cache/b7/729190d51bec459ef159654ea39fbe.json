{"id":"node_modules/@inrupt/solid-client-authn-core/dist/storage/__mocks__/StorageUtility.js","dependencies":[{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\storage\\__mocks__\\StorageUtility.js.map","includedInParent":true,"mtime":1645788391029},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\src\\storage\\__mocks__\\StorageUtility.ts","includedInParent":true,"mtime":1645788391054},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\package.json","includedInParent":true,"mtime":1645793376876},{"name":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\package.json","includedInParent":true,"mtime":1645788391034},{"name":"../..","loc":{"line":4,"column":20},"parent":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\storage\\__mocks__\\StorageUtility.js","resolved":"C:\\Users\\store\\Documents\\College\\5th Year\\MAI Project\\storeydy.github.io\\node_modules\\@inrupt\\solid-client-authn-core\\dist\\index.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.mockStorageUtility = exports.mockStorage = exports.StorageUtilityMock = exports.StorageUtilityGetResponse = void 0;\r\nconst __1 = require(\"../..\");\r\nexports.StorageUtilityGetResponse = \"getResponse\";\r\nexports.StorageUtilityMock = {\r\n    get: async (key, options) => exports.StorageUtilityGetResponse,\r\n    set: async (key, value) => {\r\n    },\r\n    delete: async (key) => {\r\n    },\r\n    getForUser: async (userId, key, options) => exports.StorageUtilityGetResponse,\r\n    setForUser: async (userId, values, options) => {\r\n    },\r\n    deleteForUser: async (userId, key, options) => {\r\n    },\r\n    deleteAllUserData: async (userId, options) => {\r\n    },\r\n    storeResourceServerSessionInfo: async (_webId, _resourceServerIri, _sessionExpires) => {\r\n    },\r\n    clearResourceServerSessionInfo: async (_resourceServerIri) => {\r\n    },\r\n};\r\nconst mockStorage = (stored) => {\r\n    const store = stored;\r\n    return {\r\n        get: async (key) => {\r\n            if (store[key] === undefined) {\r\n                return undefined;\r\n            }\r\n            if (typeof store[key] === \"string\") {\r\n                return store[key];\r\n            }\r\n            return JSON.stringify(store[key]);\r\n        },\r\n        set: async (key, value) => {\r\n            store[key] = value;\r\n        },\r\n        delete: async (key) => {\r\n            delete store[key];\r\n        },\r\n    };\r\n};\r\nexports.mockStorage = mockStorage;\r\nconst mockStorageUtility = (stored, isSecure = false) => {\r\n    if (isSecure) {\r\n        return new __1.StorageUtility(exports.mockStorage(stored), exports.mockStorage({}));\r\n    }\r\n    return new __1.StorageUtility(exports.mockStorage({}), exports.mockStorage(stored));\r\n};\r\nexports.mockStorageUtility = mockStorageUtility;\r\n"},"sourceMaps":{"js":{"version":3,"file":"StorageUtility.js","sourceRoot":"","sources":["../../../src/storage/__mocks__/StorageUtility.ts"],"names":[],"mappings":";;;AAqBA,6BAAiD;AAGpC,QAAA,yBAAyB,GAAG,aAAa,CAAC;AAE1C,QAAA,kBAAkB,GAAoB;IAEjD,GAAG,EAAE,KAAK,EAAE,GAAW,EAAE,OAAmC,EAAE,EAAE,CAC9D,iCAAyB;IAC3B,GAAG,EAAE,KAAK,EAAE,GAAW,EAAE,KAAa,EAAE,EAAE;IAE1C,CAAC;IACD,MAAM,EAAE,KAAK,EAAE,GAAW,EAAE,EAAE;IAE9B,CAAC;IACD,UAAU,EAAE,KAAK,EACf,MAAc,EACd,GAAW,EACX,OAAqD,EACrD,EAAE,CAAC,iCAAyB;IAC9B,UAAU,EAAE,KAAK,EACf,MAAc,EACd,MAA8B,EAC9B,OAA8B,EAC9B,EAAE;IAEJ,CAAC;IACD,aAAa,EAAE,KAAK,EAClB,MAAc,EACd,GAAW,EACX,OAA8B,EAC9B,EAAE;IAEJ,CAAC;IACD,iBAAiB,EAAE,KAAK,EAAE,MAAc,EAAE,OAA8B,EAAE,EAAE;IAE5E,CAAC;IAED,8BAA8B,EAAE,KAAK,EACnC,MAAc,EACd,kBAA0B,EAC1B,eAAuB,EACR,EAAE;IAEnB,CAAC;IACD,8BAA8B,EAAE,KAAK,EACnC,kBAA0B,EACX,EAAE;IAEnB,CAAC;CACF,CAAC;AAEK,MAAM,WAAW,GAAG,CACzB,MAAuD,EAC7C,EAAE;IACZ,MAAM,KAAK,GAAG,MAAM,CAAC;IACrB,OAAO;QACL,GAAG,EAAE,KAAK,EAAE,GAAW,EAA+B,EAAE;YACtD,IAAI,KAAK,CAAC,GAAG,CAAC,KAAK,SAAS,EAAE;gBAC5B,OAAO,SAAS,CAAC;aAClB;YACD,IAAI,OAAO,KAAK,CAAC,GAAG,CAAC,KAAK,QAAQ,EAAE;gBAClC,OAAO,KAAK,CAAC,GAAG,CAAW,CAAC;aAC7B;YACD,OAAO,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;QACpC,CAAC;QACD,GAAG,EAAE,KAAK,EAAE,GAAW,EAAE,KAAa,EAAiB,EAAE;YACvD,KAAK,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;QACrB,CAAC;QACD,MAAM,EAAE,KAAK,EAAE,GAAW,EAAiB,EAAE;YAC3C,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC;QACpB,CAAC;KACF,CAAC;AACJ,CAAC,CAAC;AArBW,QAAA,WAAW,eAqBtB;AAEK,MAAM,kBAAkB,GAAG,CAChC,MAAuD,EACvD,QAAQ,GAAG,KAAK,EACC,EAAE;IACnB,IAAI,QAAQ,EAAE;QACZ,OAAO,IAAI,kBAAc,CAAC,mBAAW,CAAC,MAAM,CAAC,EAAE,mBAAW,CAAC,EAAE,CAAC,CAAC,CAAC;KACjE;IACD,OAAO,IAAI,kBAAc,CAAC,mBAAW,CAAC,EAAE,CAAC,EAAE,mBAAW,CAAC,MAAM,CAAC,CAAC,CAAC;AAClE,CAAC,CAAC;AARW,QAAA,kBAAkB,sBAQ7B","sourcesContent":["/*\r\n * Copyright 2021 Inrupt Inc.\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal in\r\n * the Software without restriction, including without limitation the rights to use,\r\n * copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the\r\n * Software, and to permit persons to whom the Software is furnished to do so,\r\n * subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,\r\n * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\r\n * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\r\n * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\r\n * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\r\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nimport { IStorage, StorageUtility } from \"../..\";\r\nimport IStorageUtility from \"../IStorageUtility\";\r\n\r\nexport const StorageUtilityGetResponse = \"getResponse\";\r\n\r\nexport const StorageUtilityMock: IStorageUtility = {\r\n  /* eslint-disable @typescript-eslint/no-unused-vars */\r\n  get: async (key: string, options?: { errorIfNull?: boolean }) =>\r\n    StorageUtilityGetResponse,\r\n  set: async (key: string, value: string) => {\r\n    /* do nothing */\r\n  },\r\n  delete: async (key: string) => {\r\n    /* do nothing */\r\n  },\r\n  getForUser: async (\r\n    userId: string,\r\n    key: string,\r\n    options?: { errorIfNull?: boolean; secure?: boolean }\r\n  ) => StorageUtilityGetResponse,\r\n  setForUser: async (\r\n    userId: string,\r\n    values: Record<string, string>,\r\n    options?: { secure?: boolean }\r\n  ) => {\r\n    /* do nothing */\r\n  },\r\n  deleteForUser: async (\r\n    userId: string,\r\n    key: string,\r\n    options?: { secure?: boolean }\r\n  ) => {\r\n    /* do nothing */\r\n  },\r\n  deleteAllUserData: async (userId: string, options?: { secure?: boolean }) => {\r\n    /* do nothing */\r\n  },\r\n  /* eslint-enable @typescript-eslint/no-unused-vars */\r\n  storeResourceServerSessionInfo: async (\r\n    _webId: string,\r\n    _resourceServerIri: string,\r\n    _sessionExpires: number\r\n  ): Promise<void> => {\r\n    // Do nothing\r\n  },\r\n  clearResourceServerSessionInfo: async (\r\n    _resourceServerIri: string\r\n  ): Promise<void> => {\r\n    // Do nothing\r\n  },\r\n};\r\n\r\nexport const mockStorage = (\r\n  stored: Record<string, string | Record<string, string>>\r\n): IStorage => {\r\n  const store = stored;\r\n  return {\r\n    get: async (key: string): Promise<string | undefined> => {\r\n      if (store[key] === undefined) {\r\n        return undefined;\r\n      }\r\n      if (typeof store[key] === \"string\") {\r\n        return store[key] as string;\r\n      }\r\n      return JSON.stringify(store[key]);\r\n    },\r\n    set: async (key: string, value: string): Promise<void> => {\r\n      store[key] = value;\r\n    },\r\n    delete: async (key: string): Promise<void> => {\r\n      delete store[key];\r\n    },\r\n  };\r\n};\r\n\r\nexport const mockStorageUtility = (\r\n  stored: Record<string, string | Record<string, string>>,\r\n  isSecure = false\r\n): IStorageUtility => {\r\n  if (isSecure) {\r\n    return new StorageUtility(mockStorage(stored), mockStorage({}));\r\n  }\r\n  return new StorageUtility(mockStorage({}), mockStorage(stored));\r\n};\r\n"]}},"error":null,"hash":"fce68a6de219184c5b4f7034fafd943a","cacheData":{"env":{}}}